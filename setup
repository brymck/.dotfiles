#!/usr/bin/ruby
require "fileutils"
require "yaml"

module Logger
  COLORS = {
    :red    => 31,
    :green  => 32,
    :yellow => 33
  }

  def log(status, message, color)
    puts "[\e[#{COLORS[color]}m#{status}\e[0m] #{message}"
  end
end

class Linker
  include Logger

  def link(path)
    if !is_correctly_linked?(path)
      target_path = target(path)
      if File.exist?(target_path)
        print "This will delete the file at #{target_path}. Okay? (y/n) "
        answer = STDIN.gets
        return if !["y", "yes"].include?(answer.chomp)
      end
      FileUtils.rm_rf(target_path)
      log "linking", path, :yellow 
      FileUtils.ln_s(source(path), target_path)
    else
      log "checked", path, :green
    end
  end

  private

  def target(path)
    File.join(ENV["HOME"], path)
  end

  def source(path)
    @source_root ||= File.expand_path(File.dirname(__FILE__))
    File.join(@source_root, path)
  end

  def is_correctly_linked?(path)
    File.symlink?(target(path)) && File.readlink(target(path)) == source(path)
  end

  def build_directory_structure(path)
    dirs = File.dirname(path)
    File.mkdir_p(target(dirs)) if dirs != "."
  end
end

class Runner
  attr_reader :commands

  def initialize(commands)
    @commands = commands
    @linker = Linker.new
  end

  def run(cmd)
    command = @commands[cmd]
    if command.nil?
      false
    else
      command["files"].each { |f| link(f) }
    end
  end

  private

  def link(path)
    @linker.link(path)
  end
end

config = YAML.load_file(File.join(File.expand_path(File.dirname(__FILE__)), "commands.yml"))
r = Runner.new(config)
command = ARGV.first

if r.run(command)
  puts "Done!"
else
  puts "Invalid command: #{command || "(none)"}"
  puts
  puts "Valid commands:"
  r.commands.keys.each { |c| puts "  #{c}" }
  exit(1)
end

